<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ДХ: </title>
    <link>https://snupt.com/categories/</link>
    <description>Recent content on ДХ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Wed, 08 Aug 2018 11:57:44 +0300</lastBuildDate>
    
        <atom:link href="https://snupt.com/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Автоматический деплой приложений</title>
      <link>https://snupt.com/blog/deployment-automation-tools/</link>
      <pubDate>Wed, 08 Aug 2018 11:57:44 +0300</pubDate>
      
      <guid>https://snupt.com/blog/deployment-automation-tools/</guid>
      <description>
      
      

&lt;p&gt;В этой заметке пойдёт речь об автоматизации выкладки приложений на удалённые серверы и базовое управление процессами.&lt;/p&gt;

&lt;h2 id=&#34;проблематика&#34;&gt;Проблематика&lt;/h2&gt;

&lt;p&gt;Обычно у админа есть несколько задач связанных с работой приложений на удалённых серверах:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Доставка, установка приложения и его зависимостей&lt;/li&gt;
&lt;li&gt;Доставка контента&lt;/li&gt;
&lt;li&gt;Доставка служебных файлов

&lt;ul&gt;
&lt;li&gt;Конфиги&lt;/li&gt;
&lt;li&gt;Сертификаты&lt;/li&gt;
&lt;li&gt;Скрипты&lt;/li&gt;
&lt;li&gt;Переменные окружения&lt;/li&gt;
&lt;li&gt;И так далее&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Администрирование сервера

&lt;ul&gt;
&lt;li&gt;Создание и настройка учётных записей&lt;/li&gt;
&lt;li&gt;Управление сервисами&lt;/li&gt;
&lt;li&gt;Обновление приложений&lt;/li&gt;
&lt;li&gt;И так далее&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это набор довольно типичных задач, но их объём может варьироваться в зависимости от требований.&lt;/p&gt;

&lt;p&gt;Возьмём к примеру установку и администрирование простого почтового сервера на базе Postfix. Представьте объём работы, которую надо проделать для того чтоб поставить полноценный почтовый сервер. Необходимо настроить базовую функциональность, прикрутить антиспам, антивирус, сгенерировать сертификаты, ключи шифрования, фильтрацию обработки почты и обеспечить безопасность. По разным прикидкам у человека который делает это впервые может уйти до недели. А что если надо мигрировать на другой сервер? То есть задача повторить тоже самое, но в другом месте и возможно даже на другой операционной системе. Сможете вспомнить всё что надо сделать? Сомневаюсь. Всегда есть риск ошибиться, погрязнуть в зависимостях, конфигах, забыть настроить бекапы, безопасность, ещё что-то. Или вот другой случай, поделиться настройками с кем-то ещё. Вы заливаете все конфиги в гитхаб, кто-то их скачивает, но у него ничего не работает из-за отличий в системном окружении. А если работа идёт в команде и делиться надо постоянно? Ну, вы поняли.&lt;/p&gt;

&lt;p&gt;Ранее традиционными способами решения таких проблем были скрипты. Однако, писать скрипты под каждую задачу это сложно и долго. На сегодняшний день подобные задачи принято решать через инструменты &lt;a href=&#34;https://ru.wikipedia.org/wiki/Конфигурационное_управление&#34;&gt;конфигурационного управления&lt;/a&gt;. Одним из таких инструментов является продукт компании Red Hat — &lt;a href=&#34;https://ru.wikipedia.org/wiki/Ansible&#34;&gt;Ansible&lt;/a&gt;. Главное его отличие от аналогов в том, что не нужна установка агента/клиента на целевые системы. Ну а использование декларативного языка разметки для описания конфигураций даёт низкий порог вхождения.&lt;/p&gt;

&lt;h2 id=&#34;установка&#34;&gt;Установка&lt;/h2&gt;

&lt;p&gt;В macOS его можно установить через &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install ansible&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Либо через python pip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ sudo easy_install pip
$ sudo -H pip install ansible&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ansible представляет из себя набор связанных модулей, работа с которыми описывается конфигурационными файлами в формате &lt;a href=&#34;https://ru.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt;. Продукт прекрасно документирован &lt;a href=&#34;https://docs.ansible.com/ansible/latest/index.html&#34;&gt;Ansible Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;демонстрационный-проект&#34;&gt;Демонстрационный проект&lt;/h2&gt;

&lt;p&gt;Давайте создадим типовой проект конечной целью которого будет публикация простого веб приложения на vps хостинг. Я заранее создал дроплет в Digital Ocean с предустановленной Ubuntu Server 18.04 в базовой конфигурации для демонстрации возможностей Ansible.&lt;/p&gt;

&lt;p&gt;Предлагаю разбить проект на два этапа. На первом подготовим сервер к боевым задачам:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Создание пользователя&lt;/li&gt;
&lt;li&gt;Смена часового пояса&lt;/li&gt;
&lt;li&gt;Обновление пакетов до последних версий&lt;/li&gt;
&lt;li&gt;Установка Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На втором произведём деплой приложения и настроим менеджмент вокруг него:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Доставка приложения&lt;/li&gt;
&lt;li&gt;Управление состоянием&lt;/li&gt;
&lt;li&gt;Резервное копирование данных&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;структура&#34;&gt;Структура&lt;/h3&gt;

&lt;p&gt;Подсматриваем в &lt;a href=&#34;https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html&#34;&gt;Best Practices&lt;/a&gt; и делаем соответствующую разметку:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;group_vars/         # общие переменные
  all/
    vars.yml
    vault.yml
roles/
  common/           # менеджмент сервера
    tasks/
      main.yml
  blog/             # веб приложение 
    files/
    tasks/
      main.yml
inventory.ini       # список хостов
playbook.yml        # плейбук&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Запишем в &lt;code&gt;inventory.ini&lt;/code&gt; данные необходимые для подключения к серверу:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;[webserver]&lt;/span&gt;
&lt;span style=&#34;color:#4070a0&#34;&gt;178.128.207.139 ansible_user&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;snupt ansible_port=22 ansible_python_interpreter=&amp;#34;/usr/bin/env python3&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Группу хостов назовём &lt;code&gt;webserver&lt;/code&gt;. В этом примере сервер один, но на практике их может быть сколько угодно. Пользователя &lt;code&gt;snupt&lt;/code&gt; на сервере ещё не существует, но не волнуйтесь, мы решим эту задачу чуть позже. По умолчанию Ansible использует Python2, а в Ubuntu 18.04 установлен только Python3, поэтому нам нужно поменять это принудительно через переменную &lt;code&gt;ansible_python_interpreter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Все задачи можно описывать прямиком в плейбуке, но если их много и приложение не одно, то хорошей практикой является использование так называемых ролей. Роли помогают группировать задачи.&lt;/p&gt;

&lt;h3 id=&#34;создание-пользователя&#34;&gt;Создание пользователя&lt;/h3&gt;

&lt;p&gt;Давайте подготовимся к процессу создания учётной записи. Объявим переменные с содержанием имени пользователя и пароля. С именем всё просто, оно хранится в текстовом виде, а вот пароль, следуя &lt;a href=&#34;https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module&#34;&gt;документации&lt;/a&gt; нужно передавать в зашифрованном виде.&lt;/p&gt;

&lt;p&gt;В macOS это делается следующим образом:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ sudo -H pip install passlib
$ python -c &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Общие переменные хранятся в каталоге &lt;code&gt;group_vars/all/&lt;/code&gt;. Запишем в файл &lt;code&gt;vars.yml&lt;/code&gt; переменную с именем пользователя:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;username:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;snupt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;А в файл &lt;code&gt;vault.yml&lt;/code&gt; переменную с паролем:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;user_password:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;$&lt;span style=&#34;color:#40a070&#34;&gt;6&lt;/span&gt;$smd6jF7Z5Ze9sWgF$56SxnDUaQ79GMIcVWDRIERSTKEKE103WOcFQLNvsGijlFcxWRJz1vrVWRwOqsg6xGkYF94ePUXuQISRITgVzI1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для администрирования пользователей Ansible предлагает использовать модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/user_module.html#user-module&#34;&gt;user&lt;/a&gt;. Откройте документацию, посмотрите секцию возможных параметров и примеры использования. Помимо создания пользователя нам желательно бы сразу настроить авторизацию по ключу. Для этого также есть подходящий модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/authorized_key_module.html#authorized-key-module&#34;&gt;authorized_key&lt;/a&gt;. Воспользуемся модулем &lt;a href=&#34;https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html&#34;&gt;lineinfile&lt;/a&gt; для редактирования файла sudoers и заставим sudo не просить пароль у всех кто в группе admin.&lt;/p&gt;

&lt;p&gt;Создаём файл &lt;code&gt;roles/common/tasks/useradd.yml&lt;/code&gt; со следующей информацией:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;create&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;new&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;user&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;user:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ username }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;password:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ user_password }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;shell:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/bin/bash&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;groups:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;admin&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;append:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;set&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;authorized&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;taken&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;from&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;file&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;authorized_key:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;user:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;snupt&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;state:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;present&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;key:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ lookup(&amp;#39;file&amp;#39;, &amp;#39;~/.ssh/id_rsa.pub&amp;#39;) }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;allow&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;admin&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;group&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;to&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;have&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;passwordless&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sudo&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;lineinfile:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;path:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/etc/sudoers&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;regexp:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;^%admin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;line:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;%admin ALL=(ALL) NOPASSWD: ALL&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;validate:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;/usr/sbin/visudo -cf %s&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;По умолчанию роль выполнит всё, что описано в файле &lt;code&gt;../tasks/main.yml&lt;/code&gt;, но наши таски находятся в &lt;code&gt;../tasks/useradd.yml&lt;/code&gt;. Можно было и не создавать отдельный файл, но сделав это мы можем импортировать его куда угодно при помощи модуля &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/import_tasks_module.html#import-tasks-module&#34;&gt;import_tasks&lt;/a&gt;. Таким образом, в ряде случаев, нам не придётся дублировать уже написанный код, а также иметь возможность работать с импортируемыми данными как с отдельным слоем абстракции. Импортируем &lt;code&gt;useradd.yml&lt;/code&gt; в &lt;code&gt;main.yml&lt;/code&gt; и попросим Ansible выполнить эти задачи от имени пользователя &lt;code&gt;root&lt;/code&gt;, так как в &lt;code&gt;inventory.ini&lt;/code&gt; указан пока ещё несуществующий пользователь:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;useradd.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;vars:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ansible_user:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;root&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Последующие задачи будем вносить по этой же схеме, поэтому давайте создадим файлы в &lt;code&gt;roles/common/tasks/&lt;/code&gt; с описанием задач, а затем импортируем их в &lt;code&gt;main.yml&lt;/code&gt; как показано на примере выше.&lt;/p&gt;

&lt;h3 id=&#34;смена-часового-пояса&#34;&gt;Смена часового пояса&lt;/h3&gt;

&lt;p&gt;Для смены временной зоны на сервере можно использовать модуль модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/timezone_module.html#timezone-module&#34;&gt;timezone&lt;/a&gt;. Создадим файл &lt;code&gt;timezone.yml&lt;/code&gt; со следующим кодом:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;set&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;timezone&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;timezone:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Europe/Moscow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;обновление-пакетов&#34;&gt;Обновление пакетов&lt;/h3&gt;

&lt;p&gt;Установка и удаление пакетов в Ubuntu делается через модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/apt_module.html#apt-module&#34;&gt;apt&lt;/a&gt;. Обновим кеш, поставим все обновления и почистим оставшийся мусор. Опишем всё это в файле &lt;code&gt;upgrade.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;upgrade&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;all&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;packages&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;to&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;the&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;latest&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;version&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;state:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;latest&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;update_cache:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;autoremove:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;autoclean:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;force_apt_get:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;установка-docker&#34;&gt;Установка Docker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;Инструкция по установке Docker&lt;/a&gt; предлагает подключить официальный репозиторий. Для этого потребуется применить модули &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/apt_key_module.html#apt-key-module&#34;&gt;apt_key&lt;/a&gt;, &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/apt_repository_module.html#apt-repository-module&#34;&gt;apt_repository&lt;/a&gt; и уже знакомый нам apt. А также добавить нашего пользователя в группу &lt;code&gt;docker&lt;/code&gt;. Все этим задачи можно объединить в одном файле &lt;code&gt;docker.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;add&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker’s&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;official&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;gpg&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt_key:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;url:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://download.docker.com/linux/ubuntu/gpg&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;add&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker’s&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;official&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;reposytory&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt_repository:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;repo:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;deb&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;https://download.docker.com/linux/ubuntu&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bionic&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;stable&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ packages }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;update_cache:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;vars:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;packages:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker-ce&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker-compose&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;add&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;user&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;to&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;group&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;user:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ username }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;groups:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;append:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Сразу желательно учесть, что для взаимодействия Ansible и Docker нужны соответствующие модули, которые ставятся через менеджер пакетов Python. Если этого не сделать, то при запуске плейбука будут ошибки с предложением поставить их. Можно создать отдельный файл, но правильней будет держать всю логику связанную с установкой Docker в одном месте, поэтому просто допишем в &lt;code&gt;docker.yml&lt;/code&gt; следующий код:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;dependencies&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;python3-pip&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;update_cache:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;modules&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;pip:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ item }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;with_items:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker-compose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;выполнение-роли-common&#34;&gt;Выполнение роли Common&lt;/h3&gt;

&lt;p&gt;Импортируем все вышеперечисленные таски в том порядке, в котором они будут выполняться. Итоговый файл &lt;code&gt;roles/common/tasks/main.yml&lt;/code&gt; должен получиться таким:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;useradd.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;vars:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ansible_user:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;root&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;timezone.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;upgrade.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь проверим, всё ли корректно отработает на сервере. Отредактируем файл &lt;code&gt;playbook.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hosts:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webserver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;gather_facts:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;no&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;become:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;roles:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;common&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ключ &lt;code&gt;become&lt;/code&gt; означает, что задачи в ролях будут выполнены с правами пользователя &lt;code&gt;root&lt;/code&gt; с помощью sudo, а &lt;code&gt;gather_facts&lt;/code&gt; выключает сбор данных с хоста, нам они не нужны. Остальное, думаю, вопросов не вызывает. Запускаем плейбук следующей командой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ansible-playbook playbook.yml -i inventory.ini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/deployment-automation-tools/001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Статус &lt;code&gt;changed&lt;/code&gt; показывает, что состояние было изменено. Если запустить команду повторно, то статус всех команд сменится на &lt;code&gt;ok&lt;/code&gt;, ведь все задачи уже были выполнены и изменений не произошло.&lt;/p&gt;

&lt;p&gt;Первый этап проекта можно считать завершённым, приступаем к деплою. Для работы веб приложения как минимум требуется программа веб-сервер, которая будет принимать HTTP-запросы от клиентов. В случае статического сайта этого будет достаточно, но бывает, что нужна ещё база данных, интерпретаторы кода и другие зависимости. Всё это требует дополнительной настройки. Для обеспечения предсказуемой работы принято использовать &lt;a href=&#34;https://ru.wikipedia.org/wiki/Docker&#34;&gt;Docker&lt;/a&gt;. С его помощью можно собрать изолированное приложение, проверить работоспособность, доставить на сервер гарантированно рабочую и протестированную сборку не меняя при этом его внешней конфигурации.&lt;/p&gt;

&lt;p&gt;Docker управляет независимыми контейнерами по одному, но если надо обеспечить взаимодействие нескольких друг с другом, то используется технология docker-compose. Конфигурационные файлы compose также описываются на языке YAML.&lt;/p&gt;

&lt;h3 id=&#34;доставка-приложения&#34;&gt;Доставка приложения&lt;/h3&gt;

&lt;p&gt;Создадим папку &lt;code&gt;roles/blog/files/app&lt;/code&gt;, а в ней файл &lt;code&gt;docker-compose.yml&lt;/code&gt; со следующим содержимым:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;version: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;services:&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;  app:&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;    image: nginx:latest&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;    container_name: nginx&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;    volumes:&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;      - ./www:/var/www&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;      - ./conf:/etc/nginx/conf.d&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;    ports:&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;      - &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;      - &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;443:443&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;    restart: always&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Там же создадим папку &lt;code&gt;www&lt;/code&gt; в которой будут находится файлы приложения и &lt;code&gt;conf&lt;/code&gt; с настройками веб сервера. Из структуры &lt;code&gt;docker-compose.yml&lt;/code&gt; должно быть видно, что эти папки подключаются к контейнеру &lt;code&gt;nginx&lt;/code&gt; и всё что мы положим туда будет доступно изнутри. Количество контейнеров может варьироваться в зависимости от приложения и всеми можно управлять через docker-compose.&lt;/p&gt;

&lt;p&gt;Работу приложения можно проверить выполнив локально команду:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ docker-compose up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если всё устраивает, то попробуем запультнуть всё это добро на сервер. Создаём файл &lt;code&gt;roles/blog/tasks/push.yml&lt;/code&gt; с разметкой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;synchronization&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;using&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;rsync&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;protocol&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(push)&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;synchronize:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;src:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;dest:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/home/{{&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;username&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;}}/app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Тут важно понимать, что &lt;code&gt;synchronize&lt;/code&gt; далеко не единственный способ доставки файлов на сервер. Есть другие модули, есть git и так далее.&lt;/p&gt;

&lt;h3 id=&#34;управление-состоянием&#34;&gt;Управление состоянием&lt;/h3&gt;

&lt;p&gt;После того как файлы будут доставлены можно зайти на сервер и запустить docker-compose вручную, но с помощью Ansible мы можем управлять состоянием и поэтому сделаем так, чтоб приложение запускалось сразу после доставки.&lt;/p&gt;

&lt;p&gt;Создадим файл &lt;code&gt;roles/blog/tasks/app_state.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;start&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;docker_service:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;project_src:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/home/{{&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;username&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;}}/app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;services:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;state:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;present&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;register:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;output&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;debug:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;var:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ansible имеет множество модулей для управления различными параметрами Docker. Использование &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/docker_service_module.html#docker-service-module&#34;&gt;docker_service&lt;/a&gt; целесообразно когда у вас уже есть написанный docker-compose файл или же вам надо описать взаимодействие между контейнерами с помощью собственной разметки Ansible. Если требуется обойтись без docker-compose, то можно использовать модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/docker_container_module.html#docker-container-module&#34;&gt;docker_container&lt;/a&gt;, который больше подходит для управления независимыми контейнерами. Параметр &lt;code&gt;state&lt;/code&gt; управляет состоянием, поменяв его значение на absent можно инициировать выполнение команды &lt;code&gt;docker-compose down&lt;/code&gt; и остановить приложение. Каждый модуль Ansible помимо входящих параметров возвращает какие-то значения. Через параметр &lt;code&gt;register&lt;/code&gt; можно сохранить эти значения в переменной и распечатывать их в момент выполнения через модуль &lt;a href=&#34;http://docs.ansible.com/ansible/latest/modules/debug_module.html#debug-module&#34;&gt;debug&lt;/a&gt;. Бывает полезно.&lt;/p&gt;

&lt;h3 id=&#34;резервное-копирование-данных&#34;&gt;Резервное копирование данных&lt;/h3&gt;

&lt;p&gt;Как гласит народная мудрость админы делятся на два типа — тех, кто делает бекапы и тех, кто пока их не делает. Для организации резервного копирования воспользуемся популярным приложением Duplicity в связке с облачным хранилищем &lt;a href=&#34;https://www.backblaze.com&#34;&gt;Backblaze&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Создадим файл &lt;code&gt;roles/blog/tasks/backup.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;duplicity&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;apt:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;{{ packages }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;update_cache:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;vars:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;packages:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;duplicity&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;python-pip&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;b2&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;module&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;pip:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;b2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;executable:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;pip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;По умолчанию Duplicity нужен модуль b2 для работы с Backblaze и я сразу учёл это. Бекапы будем делать по расписанию, поэтому создадим файл   &lt;code&gt;roles/blog/tasks/cron.yml&lt;/code&gt; с содержимым:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;daily&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;backup&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;cron:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;daily backup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;minute:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;hour:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;job:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;PASSPHRASE={{ duplicity_password }} duplicity --allow-source-mismatch /home/{{ username }}/app b2://{{ b2_account_id }}:{{ b2_application_key }}@my-vps/app&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Секретные данные спрячем в переменных &lt;code&gt;groups_vars/all/vault.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;duplicity_password:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;strongpassword&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;b2_account_id:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1234&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;b2_application_key:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1234567890&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;выполнение-роли-blog&#34;&gt;Выполнение роли Blog&lt;/h3&gt;

&lt;p&gt;Импортируем все задачи в главный файл роли &lt;code&gt;roles/blog/tasks/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;push.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;app_state.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;backup.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;import_tasks:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;cron.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;И подключим саму роль в &lt;code&gt;playbook.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hosts:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;webserver&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;gather_facts:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;no&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;become:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;yes&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;roles:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;common&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Можно запускать:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ansible-playbook playbook.yml -i inventory.ini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Если зайти на сервер по SSH, то можно увидеть, что всё отработало как надо.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/deployment-automation-tools/002.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/deployment-automation-tools/003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;безопасность&#34;&gt;Безопасность&lt;/h3&gt;

&lt;p&gt;Вроде бы всё сделано, но что если текущую конфигурацию необходимо выложить в публичный репозиторий на гитхабе? Делиться паролями со всеми желающими конечно не очень хочется. Для обеспечения безопасности секретных данных в Ansible предусмотрен соответствующий механизм &lt;a href=&#34;https://docs.ansible.com/ansible/2.4/vault.html&#34;&gt;Vault&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Введём команду:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ansible-vault encrypt group_vars/all/vault.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь файл &lt;code&gt;vault.yml&lt;/code&gt; зашифрован, а его содержимое выглядит вот так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;$ANSIBLE_VAULT;1.1;AES256
66643934633963316635633761323962613563303139653039623630303232396430376665303439
6231333464616135326339383332633262343436373131640a663238663339336338386464656263
35363731353432383662306235393463336132313835623939633261396430376630623961303437
3339643334346366310a383766613435313931393638626463383566393431323036386231333466
63633638633033626662653835333130306132616535383938323237356463663433356266643131
33646261366464333137356532656232393564356165663565663237666663303438663263623036
62313434663735613538393463343563343634343833383066323663363262663236326439386131
37306466383566313863376535366465623937346162623735636636666536353065383330313933
32323162633361386639303061613032363233646265316564366239363037353433393961336265
66383530386232353634376435303431656137646531636464323637313738323738623832636435
32633635656133356430333433626636323438396135633366356334303432643463386666646435
65386132383739393331396139613764383833626630383135353965333462656436643539376161
38636137386239333837303061666237303465363338643463613566303565633432343630376436
33633137393337666133373934386130653463623835333433326635616237643266633733666564
306564633965363963643365396463636232&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Тем не менее ничего не сломается, а в случае когда потребуется расшифровать сделать это можно командой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ansible-vault decrypt group_vars/all/vault.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Однако, будьте осторожны, есть риск забыть зашифровать и опубликовать как есть. Поэтому для редактирования зашифрованного файла лучше использовать команду &lt;code&gt;ansible-vault edit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В данной статье рассматриваются очень простые задачи Ansible и Docker. На практике приходится делать вещи сложнее, но принципы остаются теми же. Я использую эти инструменты для выкладки и управления такими приложениями как этот блог, почтовый сервер в связке с веб интерфейсом, openvpn и ikev2 серверы, mtproto telegram proxy сервер, медиасервер plex и многие другие. Больше примеров можно увидеть в моих публичных репозиториях на гитхабе:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-ansible&#34;&gt;vps-ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-blog&#34;&gt;vps-app-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-mailserver&#34;&gt;vps-app-mailserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-rainloop&#34;&gt;vps-app-rainloop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-openvpn&#34;&gt;vps-app-openvpn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-ikev2&#34;&gt;vps-app-ikev2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snupt/vps-app-mtproto&#34;&gt;vps-app-mtproto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Управление терминалом VS Code с клавиатуры</title>
      <link>https://snupt.com/blog/vscode-terminal-key-bindings/</link>
      <pubDate>Thu, 14 Jun 2018 17:15:12 +0300</pubDate>
      
      <guid>https://snupt.com/blog/vscode-terminal-key-bindings/</guid>
      <description>
      
      &lt;p&gt;Встроенный терминал хорошо вписывается в интерфейс VS Code, но по умолчанию управляется только курсором. Мышка зло, так как работа в терминале подразумевает режим ввода с клавиатуры. При активной отладке нужно как минимум быстро переключаться между вкладками терминала, создавать новые и убивать существующие сессии. Стандартные привычные клавиатурные сочетания &lt;code&gt;ctrl+tab&lt;/code&gt;, &lt;code&gt;ctrl+shift+tab&lt;/code&gt;, &lt;code&gt;cmd+n&lt;/code&gt; и &lt;code&gt;cmd+w&lt;/code&gt; дефолтом работают только для вкладок с контентом, но настройками предусмотрена возможность по разному реагировать в зависимости от того где находится фокус.&lt;/p&gt;

&lt;p&gt;Открываем файл &lt;code&gt;~/Library/Application Support/Code/User/keybindings.json&lt;/code&gt; и дописываем в него следующий конфиг:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;ctrl+tab&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;workbench.action.terminal.focusNext&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;terminalFocus&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;&#34;&gt;,&lt;/span&gt;
{
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;ctrl+shift+tab&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;workbench.action.terminal.focusPrevious&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;terminalFocus&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;&#34;&gt;,&lt;/span&gt;
{
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cmd+n&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;workbench.action.terminal.new&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;terminalFocus&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;&#34;&gt;,&lt;/span&gt;
{
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;cmd+w&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;workbench.action.terminal.kill&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#062873;font-weight:bold&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;terminalFocus&amp;#34;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Теперь биндинги будут работать и с терминалом и с контентом. Если не можете уследить за курсором, то можно назначить уникальные сочетания.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Новосибирск</title>
      <link>https://snupt.com/blog/novosibirsk/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0300</pubDate>
      
      <guid>https://snupt.com/blog/novosibirsk/</guid>
      <description>
      
      

&lt;p&gt;Состоялась моя вторая поездка в Сибирь, где я провёл все новогодние праздники. В Сочи снега на Новый год почти никогда не бывает, поэтому решили отправиться туда где он гарантировано будет. В 2013 года я уже бывал в Сибири, тогда это был город Красноярск, который мне очень понравился. Так что теперь будет с чем сравнивать.&lt;/p&gt;

&lt;h2 id=&#34;погода&#34;&gt;Погода&lt;/h2&gt;

&lt;p&gt;Собирался к поездке тщательно, взял все тёплые вещи которые только смог найти в своём гардеробе. В чемодан попало в основном снаряжение для походов, которым я запасался готовясь к Патагонии. По прилёту в Новосибирск было чуть ниже нуля, но мне всё равно было дико холодно. В городе перемещался перебежками из одного здания в другое. Спустя сути организм перестроился и холод ощущался более терпимо.&lt;/p&gt;

&lt;p&gt;Погода — главная тема для меня в Сибири. Я всю жизнь прожил на юге и мне ещё до поездки было интересно протестировать низкие температуры на собственной шкуре. До -20 вполне себе терпимо, можно спокойно прогуливаться особо не страдая. А вот когда температура опускалась до -30, то комфортом это уже не назвать. Из одежды на мне были походные высокие ботинки надетые на тёплые шерстяные носки, комплект шерстяного термобелья, утеплённые штаны, толстый флисовый свитер и лёгкий пуховик. Я взял с собой шапку, но довольно быстро понял, что шапка которую я носил в Сочи вообще никуда не годится. Пришлось отправится в торговый центр за новой. Лицо заворачивал в шарф  прям по линию глаз. Так теплее, но смущало что влага выдыхаемого воздуха быстро замерзала по поверхности шарфа покрывая его кристаллами льда.&lt;/p&gt;

&lt;p&gt;Переходя из -30 в тёплое помещение появляется другая проблема — жарко. Постоянно хотелось снять шерстяное термобельё, но тут без вариантов. В идеале конечно просто надевать очень тёплую одежду поверх лёгкой повседневной. Комплект из хорошего пуховика и утеплённых брюк-самосбросов подошёл бы идеально.&lt;/p&gt;

&lt;p&gt;Отдельная история с электронными устройствами. Я брал с собой Fujifilm X-T1 и iPhone 7 plus. Фотоаппарат отлично переносил холод, пользоваться им в перчатках было почти удобно. Телефону было совсем плохо. Он полностью выключался минут через 10 неспешной съёмки. В тепле аккумулятор постепенно оживал.&lt;/p&gt;

&lt;h2 id=&#34;развлечения&#34;&gt;Развлечения&lt;/h2&gt;

&lt;p&gt;Вопрос с досугом полностью лёг на плечи супруги, так как для неё Новосибирск родной город. Это первый отпуск где не я занимался планированием всех активностей самостоятельно. Если мы вдруг пропустили что-то важное, то напишите мне об этом и тогда будет повод вернуться.&lt;/p&gt;

&lt;h3 id=&#34;зоопарк&#34;&gt;Зоопарк&lt;/h3&gt;

&lt;p&gt;Про новосибирский зоопарк я был наслышан ещё до поездки. Он по праву считается одним из крупнейших в России с площадью в 63 га. Построен в буквально  в лесополосе, поэтому на территории много высоких деревьев. Мне понравились кошачьи (считается одной из лучших в мире коллекций), которых там успешно разводят и скрещивают. Есть например странное животное под названием лигр, представляющее из себя смесь льва и тигра, но из конуры он к сожалению к нам так не вышел. Снежных барсов с детёнышами тоже не часто встретишь. Весьма грациозные животные.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/001.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/002.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/003.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/004.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;новосибирская-государственная-филармония&#34;&gt;Новосибирская государственная филармония&lt;/h3&gt;

&lt;p&gt;Культурная программа у нас началась с джаза. Новосибирская государственная филармония является крупнейшей концертной организацией в стране. В месяц проводится около 60 концертов на различных площадках. Мы попали в современный концертный зал имени Арнольда Каца, который является основным на текущий момент. Огромное здание. Только площадь фойе — 1080 кв. м. Посадочных мест на 1080 зрителей и у нас был аншлаг. Шоу называлось «Джазовый калейдоскоп» от биг-бэнда Владимира Толкачева. Бесподобное выступление и шикарный звук в зале.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/005.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;театр-оперы-и-балета&#34;&gt;Театр оперы и балета&lt;/h3&gt;

&lt;p&gt;Но главным культурным мероприятием конечно был новогодний балет «Щелкунчик». Новосибирский театр оперы и балета крупнейший в СССР и в России. Здание является один из главных символов города и располагается в самом центре. Интерьеры очень пафосные — в фойе преобладают бордовые тона. Амфитеатр на 2600 мест и снова без свободных мест. Я точно не являются экспертом в области балета, но шоу было великолепным. Больше всего понравились декорации и костюмы. Ну и музыка Чайковского конечно же на все времена. Это лучше Звёздных войн :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/006.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/007.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/008.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/009.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/010.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/011.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ледовый-городок-на-набережной-оби&#34;&gt;Ледовый городок на набережной Оби&lt;/h3&gt;

&lt;p&gt;Рядом с речным вокзалом есть довольное необычное место где зимой можно найти ледовый городок. Тут по большей части представлены различные скульптуры сделанные изо льда. Выглядит очень красиво. Есть также большое количество ледовых горок — от совсем детских до довольно высоких откуда я боялся съезжать. Также отсюда открывается вид на самый длинный крытый метромост в мире. Его длина составляет 2145 м. Я пытался сфоткать, но края даже не видно. На территории городка есть где погреться и выпить горячих напитков (без алкоголя).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/012.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/013.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/014.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/015.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/016.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/017.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;краеведческий-музей&#34;&gt;Краеведческий музей&lt;/h3&gt;

&lt;p&gt;Успели посетить один музей — зато какой. Не думал, что в России мне попадётся приличный музей, но этот как раз такой. Находится краеведческий музей в здании бывшего городского торгового корпуса, которое само по себе памятник архитектуры, постройка начала 20 века. В нём можно получить информацию о прошлом Сибири и Новосибирска в частности, начиная с предметов культуры и быта коренных жителей и заканчивая экспонатами из советского прошлого. В отдельном корпусе находится археологическая коллекция, где можно увидеть полный скелет мамонта.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/018.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;кафе-и-рестораны&#34;&gt;Кафе и рестораны&lt;/h2&gt;

&lt;p&gt;О том, что общепит в Сибири крутой я узнал ещё в Красноярске. Такого количество уникальных кафе и ресторанов встретишь не в каждой мировой столице. Если посмотреть в TripAdvisor, то можно найти массу уникальных мест с традиционной сибирской, кавказской, азитской и даже латиноамериканской кухней. На улице холодно, заведений много, всегда есть люди, сервис почти везде от среднего до очень хорошего. Все пытаются чем-то удивить и это не удивительно, заметна большая конкуренция, которая всегда только на руку посетителям. Соблазнов много — сибирские настойки (хреновуха, медовуха, ягодные и ореховые), брусничные пироги, блюда из северного оленя, пельмени из четырёх видов мяса, ягодные десерты, кофе на кедровых орехах и тд. Ух, всего и не вспомню. Одно заведение особенно запомнилось — ресторан «СибирьСибирь». Необычный интерьер, меню с упором на традиционную сибирскую кухню. Место чем-то похоже на Хозяин Тайги в Красноярске. Цены чуть выше средних, но ничего запредельного.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/019.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/020.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/021.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/022.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;транспорт&#34;&gt;Транспорт&lt;/h2&gt;

&lt;p&gt;Метро небольшое, всего две ветки и те преимущественно по центру города. Ездили на такси, автобусах, маршрутных такси, троллейбусах и трамваях. В основном транспорт конечно старый и убитый по сравнению с Сочи. Зато всё ходит как часы и несмотря на праздники никаких давок. В новогоднюю ночь сразу после фейерверка без проблем уехали на метро. Иногда в транспорте довольно холодно, но терпимо. Такси не дорогое, доступное, пользовались как Убером, так и РуТакси, ни разу проблем не возникло. Говорят, что в будние город накрывают пробки, но на праздниках мы ни в одну не попали.&lt;/p&gt;

&lt;h2 id=&#34;архитектура&#34;&gt;Архитектура&lt;/h2&gt;

&lt;p&gt;Новосибирск довольно густой город. Я не увидел чётких границ между центром и прилегающими районами. Всё довольно однотипное — смесь советских построек с современными зданиями. Архитектура в целом довольно скучная, в этом отношении всё как в любом типичном российском «миллионнике».&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/novosibirsk/023.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/024.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/025.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/026.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/027.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/novosibirsk/028.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Эстафета олимпийского огня</title>
      <link>https://snupt.com/blog/estafeta-olimpiyskogo-ognya/</link>
      <pubDate>Fri, 06 Dec 2013 20:32:00 +0300</pubDate>
      
      <guid>https://snupt.com/blog/estafeta-olimpiyskogo-ognya/</guid>
      <description>
      
      &lt;p&gt;В этой статье постараюсь воссоздать события 26 ноября во время которых я принимал участие в эстафете олимпийского огня в г. Красноярск. Ничего особенного я почему-то не ожидал, но в результате получил громадное удовольствие.&lt;/p&gt;

&lt;p&gt;Очень понравилась организация, за что отдельное спасибо хочу сказать ребятам из Оргкомитета и сотрудникам Арена Север, которые нас встречали. По прибытию на пункт сбора нам выдали форму одежды, прономерованные факелы и провели инструктаж. Я очень удивился насколько просто и празднично это все происходило. Никто нам ничего не навязывал. Во время бега хоть сальто делай, если сможешь. Потух факел? Не проблема, подойдет человек с лампадой и зажжет снова. Либо вообще дадут в руки новый. Никто трагедии из этого не делает, кроме умственных инвалидов из социальных сетей. На нашем этапе лишь раз факел не загорелся у одного из моржей, который должен был плыть с ним по ледяному Енисею. Ничего страшного, дали новый. Всё с улыбкой, с хорошей поддержкой публики и организаторов. После инструктажа нас посадили в автобус и всей командой направили на улицу Мичурина с которой и начиналась эстафета.&lt;/p&gt;

&lt;p&gt;Факелоносцев по очереди высаживали из автобусов по всей дистанции. Все друг друга поздравляли и поддерживали. Вдоль автомобильной трассы выстраивали оцепление и волонтеров. Подходить к факелоносцу не разрешали. С момента высадки и передачи огня я стоял около пяти минут, потом мало что помню, как будто всё во сне произошло. Факел нельзя включить самому без специального ключа. По приближению факелоносца ко мне подошел специальный человек с таким ключиком, включил газ, соединил наши факелы и отошел на дистанцию. Дальше нас снимали камеры и начался мой этап эстафеты. Бежал не долго, около 200 метров, медленным темпом. Вокруг меня бежала команда хранителей огня, они подбадривали, говорили где надо сбавить темп, где прибавить. Факел довольно тяжелый, но прямой вытянутой руке устаешь быстро, а вот если опустить руку пониже, становится легче. После того как я передал огонь следующему участнику, мне тут же факел отключили и отодвинули в сторону, но огонь угасал еще какое-то время. В этот момент кто-то даже успел подойти сфотографироваться, а потом меня забрал следом идущий автобус и мы поехали собирать остальных.&lt;/p&gt;

&lt;p&gt;Все были опьянены радостью. На нашем этапе участвовала женщина-инвалид на коляске, кто-то ехал свою дистанцию на велосипеде, но особенно запомнились моржи, которые плыли по Енисею в мороз с факелом в руке. Железные люди. На завершающем этапе огонь привезли на «Север Арену» набитую зрителями. На этом наш утренний этап эстафеты закончился. Потом еще был дневной и вечерний, в завершении которого городскую чашу огня зажгла двукратная олимпийская чемпионка Медведцева Ольга Валерьевна. И факел и форма остались у меня на память. Будет что внукам показывать.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/estafeta-olimpiyskogo-ognya/001.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/estafeta-olimpiyskogo-ognya/002.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Красноярск</title>
      <link>https://snupt.com/blog/krasnoyarsk/</link>
      <pubDate>Fri, 06 Dec 2013 20:27:00 +0300</pubDate>
      
      <guid>https://snupt.com/blog/krasnoyarsk/</guid>
      <description>
      
      &lt;p&gt;&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/001.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Итак, это событие все таки состоялось. Сибирский отпуск получился на славу и запомнится очень надолго. Всему виной замечательный город Красноярск и историческая эстафета в которой я принял участие. Об эстафете отдельно напишу в следующей статье.&lt;/p&gt;

&lt;p&gt;Летел через Москву, в общей сложности около 7 часов. В день прибытия как раз выпал первый снег и не спадал до момента моего улета домой. Этому я безумно рад, удалось получить весьма сказочное настроение, так как снег я вижу в своем южном городе не часто. Первые три дня мы потратили на экскурсии по городу. Красноярск довольно большой и при этом скромный советский город без особых изысков, избалованности, но с очень хорошими добрыми людьми и вполне себе нормальной инфраструктурой. Хоть мне и жаловались на пробки, побывать в настоящем заторе так и не удалось. Напомню, что в Сочи я стою в пробках по 2-3 часа ежедневно. И это только в пределах Адлерского района. В Красноярске все гораздо скромнее в этом отношении. Много автобусов, никаких маршруток и самое дешевое такси из всех что я видел. Цена по городу очень редко когда превышает 200 рублей за поездку. Только загород мы платили что-то около 300 рублей. Такси был основным моим транспортом в течении недели, но ездил и на автобусах пару раз.&lt;/p&gt;

&lt;p&gt;Сразу после прилета поехали смотреть часовню, которая изображена на десятирублёвой купюре. Там же располагается пушка, которая стреляет каждый день в 12 часов по полудню и довольно неплохой обзорный вид на город.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/002.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/003.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/004.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/005.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/006.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Весь следующий день мы посвятили посещению великого сибирского заповедника &lt;a href=&#34;http://ru.wikipedia.org/wiki/Столбы_(заповедник)&#34;&gt;«Столбы»&lt;/a&gt;. Мне очень понравилось что заповедник по сегодняшний день остается диким и максимально нетронутым человеческой рукой. По сути это туристическая тропа длиной около 7 километров. Лишь несколько раз встречались маленькие ларечки с горячими напитками. Я брал с собой тяжелый рюкзак с фототехникой, но вскоре очень пожалел об этом. Склон тропы со временем становятся все выше и выше. Дойдя до скал я уже был практически без сил. Более того, начиная с первого столба тропинка кончается и далее приходится идти по рыхлому глубокому снегу. Люди ходят на столбы погулять, отдохнуть от городской жизни, попеть песни и попросту насладится тишиной Тайги. В лесу не слышно ни одного звука кроме хруста снега под ногами. Это можно слушать вечно. Бухать на столбах не принято, пьяных вообще не видел, хотя народу масса. Ввиду обильной скалистой местности в Красноярске довольно сильно развито скалолазание. Я видел множество скалодромов даже в черте города. Есть даже термин &lt;a href=&#34;http://ru.wikipedia.org/wiki/Столбизм&#34;&gt;столбизм&lt;/a&gt; — скалолазание и общение в неформальной обстановке в природных условиях. К сожалению, на столбах разбиваются много людей. Всюду памятники погибшим. Очень советую посетить это природное наследие, если будете гостить в Красноярске.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/007.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/008.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/009.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/010.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/011.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/012.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/013.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/014.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Большую часть времени проходил в городе без фотокамеры. Да и снимать там особо нечего. Обычная советская архитектура, скромные улицы, небольшая набережная Енисея, где можно покормить уточек. Красноярск считается очень грязным городом, хотя под снегом я особо это не заметил. Никакой промышленной вони я на улице тоже не заметил. В парках, кафе, вокзалах и прочих общественных местах присутствует бесплатный WiFi. Интернет в городе развитый и доступный. Даже в Гонконге по моему мнению с этим делом хуже. Много круглосуточных магазинов; кафе, рестораны и кинотеатры закрываются поздно. Город не умирает с наступлением темноты, всегда есть выбор куда пойти и что поесть. Сибирская кухня пленила меня целиком и полностью. Ничего вкуснее ни в одной части земного шара я доселе не ел. Множество блюд из оленины с брусничным соусом, брусника с квашенной капустой, черёмуховый пирог с кремом из домашней сметаны, шулюм из дичи, сугудай из муксуна, хреновуха. Богатый выбор вин в ресторанах с довольно низкой наценкой. Цены даже в «дорогих» ресторанах довольно низкие. Дороже чем на $100 на двоих без алкоголя вряд ли где можно поесть. Рекомендую ресторан «Хозяин Тайги», находящийся в загородном парке «Бобровый лог». Был там целых два раза, еда вкуснейшая, обслуживание добрейшее. Официанты очень хорошо разбираются в собственном меню, вплоть до исторических фактов появления того или иного блюда и нюансах его приготовления. Советы дают опираясь на свой вкус и ваши желания, а не исходя из ценника. Это не реклама, а действительно лучший ресторан из всех где я когда-либо бывал.&lt;/p&gt;

&lt;p&gt;Еще хотелось бы похвалить местный зоопарк. Он довольно уютный, много красивых животных местной фауны, которых я больше нигде в мире не видел. Очень большое семейство кошачьих — тигры, снежные барсы, пумы, рыси и так далее. Очень понравились волки и белые медведи. Впервые увидел орлов и ястребов. Они великолепны. Большинство животных довольно уютно чувствует себя в вальерах, хотя жирафов в тесном здании мне было жалко. На территории зоопарка есть даже океанариум. Причем довольно неплохой.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/015.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/016.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/017.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/018.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/019.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/020.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/021.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/022.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/023.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/024.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://snupt.com/images/krasnoyarsk/025.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Люди в Красноярске заслуживают отдельных почестей. Никто мне за всю поездку нигде не нахамил, во всех кафе, магазинах, такси улыбались, благодарили. Я давно такого не видел у нас. В последний день ужинал вечером в клубе «Облака», за соседний столик села компания молодых людей, все поздоровались, хотя я их впервые видел, а позже еще спросили не громко ли они разговаривают, а то может мне мешает. Обычные такие пацаны лет 30 с виду. Не знаю, может быть я по правильным местам ходил и правильных людей встречал, но мне со всеми было легко общаться и никто меня ни разу не взбесил, как то обычно бывает, например, в ненавистной Москве. Красноярск меня настолько растрогал, что не хотелось уезжать. Как будет возможность, обязательно вернусь.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>